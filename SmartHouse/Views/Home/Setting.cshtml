@model SmartHouse.Models.Settings

@{
    ViewBag.Title = "Setting";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<style>

.button {
    background-color: #4CAF50; /* Green */
    border: none;
    color: white;
    padding: 10px 20px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
    margin: 4px 2px;
    -webkit-transition-duration: 0.4s; /* Safari */
    transition-duration: 0.4s;
    cursor: pointer;
}

.button3 {
background-color: white;
color: black;
border: 2px solid #A1A1A1;
}

.button3:hover {
    background-color: #A1A1A1;
    color: white;
}

.divred {
    background-color: white;
}

.divred:hover {
    background-color: #ff9191;
}

.divblue {
background-color: white;
}

.divblue:hover {
    background-color: #64b1f4;
}

.divgreen {
background-color: white;
}

.divgreen:hover {
    background-color: #4ba394;
}

.divyellow {
background-color: white;
}

.divyellow:hover {
    background-color: #f9b975;
}
.divgray {
    background-color: white;
}

.divgray:hover {
    background-color: #bababa;
}

/* The Modal (background) */
.modal {
    display: none; /* Hidden by default */
    position: fixed; /* Stay in place */
    z-index: 1; /* Sit on top */
    left: 0;
    top: 0;
    width: 100%; /* Full width */
    height: 100%; /* Full height */
    overflow: auto; /* Enable scroll if needed */
    background-color: rgb(0,0,0); /* Fallback color */
    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
    -webkit-animation-name: fadeIn; /* Fade in the background */
    -webkit-animation-duration: 0.4s;
    animation-name: fadeIn;
    animation-duration: 0.4s
}

/* Modal Content */
.modal-content {
    position: fixed;
    bottom: 0;
    background-color: #fefefe;
    width: 100%;
    -webkit-animation-name: slideIn;
    -webkit-animation-duration: 0.4s;
    animation-name: slideIn;
    animation-duration: 0.4s
}

.modal-header {
    padding: 2px 16px;
    background-color: #646566;
    color: white;
}

.modal-footer {
    padding: 2px 16px;
    background-color: white;
    color: white;
}

/* Add Animation */
@@-webkit-keyframes slideIn {
    from {bottom: -300px; opacity: 0}
    to {bottom: 0; opacity: 1}
}

@@keyframes slideIn {
    from {bottom: -300px; opacity: 0}
    to {bottom: 0; opacity: 1}
}

@@-webkit-keyframes fadeIn {
    from {opacity: 0}
    to {opacity: 1}
}

@@keyframes fadeIn {
    from {opacity: 0}
    to {opacity: 1}
}

.modal-body {
    padding: 2px 20px;
    font-size: 16px;
}

</style>

<div class="w3-row-padding w3-margin-bottom">
    <hr />
    <dl class="dl-horizontal">

        <div class="w3-container divred">
            <table>
                <tr>
                    <th>
                        <h1 class="w3-large">@Html.DisplayNameFor(model => model.CriticalTemperatureAlertYN)</h1>
                    </th>

                    <th>
                        <dd1>
                            <h2 class="w3-large">@Html.CheckBoxFor(model => model.CriticalTemperatureAlertYN, new { id = "temperatureAlertYNCheckBox", @onclick = "enableDisableTemperatureEmailAlert()" })</h2>
                        </dd1>
                    </th>
                </tr>

                <tr>
                    <th>
                        <h1 class="w3-large">@Html.DisplayNameFor(model => model.CriticalTemperatureAlertMinValue)</h1>
                    </th>

                    <th>
                        <dd1>
                            <h2 class="w3-large">@Html.TextBoxFor(model => model.CriticalTemperatureAlertMinValue, new { id = "temperatureAlertMinValueTextBox" })</h2>
                        </dd1>
                    </th>
                    <th>
                        <label><span> < Temperature < </span></label>
                    </th>
                    <th>
                        <h2 class="w3-large">@Html.TextBoxFor(model => model.CriticalTemperatureAlertMaxValue, new { id = "temperatureAlertMaxValueTextBox" })</h2>
                    </th>
                </tr>

                <tr>
                    <th>
                        <h1 class="w3-large">@Html.DisplayNameFor(model => model.SendTemperatureEmailAlertInterval)</h1>
                    </th>

                    <th>
                        <dd1>
                            <h2 class="w3-large">@Html.TextBoxFor(model => model.SendTemperatureEmailAlertInterval, new { id = "sendTemperatureEmailAlertIntervalTextBox" })</h2>
                        </dd1>
                    </th>

                    <th>
                        <div class="w3-container">
                            <h2 class="w3-large">
                                @Html.DropDownListFor(model => model.SendTemperatureEmailAlertIntervalUnitMeasure, new SelectList(new List<Object>
                                                                                                            {
                                                                                                            new { value = 1 , text = "MINUTE"  },
                                                                                                            new { value = 2 , text = "HOUR" },
                                                                                                            new { value = 3 , text = "DAY"}
                                                                                                            },
                  "value",
                  "text",
                  @Model.SendTemperatureEmailAlertIntervalUnitMeasure), new { id = "sendTemperatureEmailAlertIntervalUnitMeasureDropDownList" })
                            </h2>
                        </div>
                    </th>
                </tr>

                <tr>
                    <th>
                        <h1 class="w3-large">@Html.DisplayNameFor(model => model.CriticalHumidityAlertYN)</h1>
                    </th>

                    <th>
                        <dd1>
                            <h2 class="w3-large">@Html.CheckBoxFor(model => model.CriticalHumidityAlertYN, new { id = "humidityAlertYNCheckBox", @onclick = "enableDisableHumidityEmailAlert()" })</h2>
                        </dd1>
                    </th>
                </tr>

                <tr>
                    <th>
                        <h1 class="w3-large">@Html.DisplayNameFor(model => model.CriticalHumidityAlertMinValue)</h1>
                    </th>
                    <th>
                        <dd1>
                            <h2 class="w3-large">@Html.TextBoxFor(model => model.CriticalHumidityAlertMinValue, new { id = "humidityAlertMinValueTextBox" })</h2>
                        </dd1>
                    </th>
                    <th>
                        <label><span> < Humidity < </span></label>
                    </th>
                    <th>
                        <h2 class="w3-large">@Html.TextBoxFor(model => model.CriticalHumidityAlertMaxValue, new { id = "humidityAlertMaxValueTextBox" })</h2>
                    </th>
                </tr>

                <tr>
                    <th>
                        <h1 class="w3-large">@Html.DisplayNameFor(model => model.SendHumidityEmailAlertInterval)</h1>
                    </th>

                    <th>
                        <dd1>
                            <h2 class="w3-large">@Html.TextBoxFor(model => model.SendHumidityEmailAlertInterval, new { id = "sendHumidityEmailAlertIntervalTextBox" })</h2>
                        </dd1>
                    </th>

                    <th>
                        <div class="w3-container">
                            <h2 class="w3-large">
                                @Html.DropDownListFor(model => model.SendHumidityEmailAlertIntervalUnitMeasure, new SelectList(new List<Object>
                                                                                                            {
                                                                                                            new { value = 1 , text = "MINUTE"  },
                                                                                                            new { value = 2 , text = "HOUR" },
                                                                                                            new { value = 3 , text = "DAY"}
                                                                                                            },
                  "value",
                  "text",
                  @Model.SendHumidityEmailAlertIntervalUnitMeasure), new { id = "sendHumidityEmailAlertIntervalUnitMeasureDropDownList" })
                            </h2>
                        </div>
                    </th>
                </tr>

                <tr>
                    <th>
                        <h1 class="w3-large">@Html.DisplayNameFor(model => model.DeleteTemperatureHumidityHistoricalDataOlderThan)</h1>
                    </th>

                    <th>
                        <dd1>
                            <h2 class="w3-large">@Html.TextBoxFor(model => model.DeleteTemperatureHumidityHistoricalDataOlderThan, new { id = "deleteTemperatureHumidityOlderThanTextBox" })</h2>
                        </dd1>
                    </th>

                    <th>
                        <div class="w3-container">
                            <h2 class="w3-large">
                                @Html.DropDownListFor(model => model.DeleteTemperatureHumidityHistoricalDataOlderThanUnitMeasure, new SelectList(new List<Object>
                                                                                                    {
                                                                                                    new { value = 1 , text = "MINUTE"  },
                                                                                                    new { value = 2 , text = "HOUR" },
                                                                                                    new { value = 3 , text = "DAY"},
                                                                                                    new { value = 4 , text = "MONTH"}
                                                                                                    },
                         "value",
                         "text",
                         @Model.DeleteTemperatureHumidityHistoricalDataOlderThanUnitMeasure), new { id = "deleteTemperatureHumidityOlderThanUnitMeasureDropDownList" })
                            </h2>
                        </div>
                    </th>
                </tr>

            </table>
        </div>

        <div class="w3-container divblue">
            <table>
                <tr>
                    <th>
                        <h1 class="w3-large">@Html.DisplayNameFor(model => model.MotionDetectionAlertYN)</h1>
                    </th>

                    <th>
                        <dd2>
                            <h2 class="w3-large">@Html.CheckBoxFor(model => model.MotionDetectionAlertYN, new { id = "motionDetectionAlertYNCheckBox", @onclick = "enableDisableMotionDetectionEmailAlertInterval()" })</h2>
                        </dd2>
                    </th>
                </tr>

                <tr>
                    <th>
                        <h1 class="w3-large">@Html.DisplayNameFor(model => model.SendMotionDetectionEmailAlertInterval)</h1>
                    </th>

                    <th>
                        <dd2>
                            <h2 class="w3-large">@Html.TextBoxFor(model => model.SendMotionDetectionEmailAlertInterval, new { id = "sendMotionDetectionEmailAlertIntervalTextBox" })</h2>
                        </dd2>
                    </th>

                    <th>
                        <div class="w3-container">
                            <h2 class="w3-large">
                                @Html.DropDownListFor(model => model.SendMotionDetectionEmailAlertIntervalUnitMeasure, new SelectList(new List<Object>
                                                                                            {
                                                                                            new { value = 1 , text = "MINUTE"  },
                                                                                            new { value = 2 , text = "HOUR" },
                                                                                            new { value = 3 , text = "DAY"}
                                                                                            },
                                "value",
                                "text",
                                @Model.SendMotionDetectionEmailAlertIntervalUnitMeasure), new { id = "sendMotionDetectionEmailAlertIntervalUnitMeasureDropDownList" })
                            </h2>
                        </div>
                    </th>
                </tr>

                <tr>
                    <th>
                        <h1 class="w3-large">@Html.DisplayNameFor(model => model.DeleteMotionDetectionHistoricalDataOlderThan)</h1>
                    </th>

                    <th>
                        <dd2>
                            <h2 class="w3-large">@Html.TextBoxFor(model => model.DeleteMotionDetectionHistoricalDataOlderThan, new { id = "deleteMotionDetectionOlderThanTextBox" })</h2>
                        </dd2>
                    </th>

                    <th>
                        <div class="w3-container">
                            <h2 class="w3-large">
                                @Html.DropDownListFor(model => model.DeleteMotionDetectionHistoricalDataOlderThanUnitMeasure, new SelectList(new List<Object>
                                                                                            {
                                                                                            new { value = 1 , text = "MINUTE"  },
                                                                                            new { value = 2 , text = "HOUR" },
                                                                                            new { value = 3 , text = "DAY"},
                                                                                            new { value = 4 , text = "MONTH"}
                                                                                            },
                                "value",
                                "text",
                                @Model.DeleteMotionDetectionHistoricalDataOlderThanUnitMeasure), new { id = "deleteMotionDetectionOlderThanUnitMeasureDropDownList" })
                            </h2>
                        </div>
                    </th>
                </tr>
            </table>
        </div>

        <div class="w3-container divgreen">
            <table>
                <tr>
                    <th>
                        <h1 class="w3-large">@Html.DisplayNameFor(model => model.SoundDetectionAlertYN)</h1>
                    </th>

                    <th>
                        <dd3>
                            <h2 class="w3-large">@Html.CheckBoxFor(model => model.SoundDetectionAlertYN, new { id = "soundDetectionAlertYNCheckBox" })</h2>
                        </dd3>
                    </th>
                </tr>

                <tr>
                    <th>
                        <h1 class="w3-large">@Html.DisplayNameFor(model => model.DeleteSoundDetectionHistoricalDataOlderThan)</h1>
                    </th>

                    <th>
                        <dd3>
                            <h2 class="w3-large">@Html.TextBoxFor(model => model.DeleteSoundDetectionHistoricalDataOlderThan, new { id = "deleteSoundDetectionOlderThanTextBox" })</h2>
                        </dd3>
                    </th>

                    <th>
                        <div class="w3-container">
                            <h2 class="w3-large">
                                @Html.DropDownListFor(model => model.DeleteSoundDetectionHistoricalDataOlderThanUnitMeasure, new SelectList(new List<Object>
                                                                                    {
                                                                                    new { value = 1 , text = "MINUTE"  },
                                                                                    new { value = 2 , text = "HOUR" },
                                                                                    new { value = 3 , text = "DAY"},
                                                                                    new { value = 4 , text = "MONTH"}
                                                                                    },
                                       "value",
                                       "text",
                                       @Model.DeleteSoundDetectionHistoricalDataOlderThanUnitMeasure), new { id = "deleteSoundDetectionOlderThanUnitMeasureDropDownList" })
                            </h2>
                        </div>
                    </th>
                </tr>
            </table>
        </div>

        <div class="w3-container divyellow">
            <table>
                <tr>
                    <th>
                        <h1 class="w3-large">@Html.DisplayNameFor(model => model.CriticalGasAlertYN)</h1>
                    </th>

                    <th>
                        <dd4>
                            <h2 class="w3-large">@Html.CheckBoxFor(model => model.CriticalGasAlertYN, new { id = "gasDetectionAlertYNCheckBox" })</h2>
                        </dd4>
                    </th>
                </tr>

                <tr>
                    <th>
                        <h1 class="w3-large">@Html.DisplayNameFor(model => model.CriticalGasHistoricalDataOlderThan)</h1>
                    </th>

                    <th>
                        <dd4>
                            <h2 class="w3-large">@Html.TextBoxFor(model => model.CriticalGasHistoricalDataOlderThan, new { id = "deleteGasOlderThanTextBox" })</h2>
                        </dd4>
                    </th>

                    <th>
                        <div class="w3-container">
                            <h2 class="w3-large">
                                @Html.DropDownListFor(model => model.CriticalGasHistoricalDataOlderThanUnitMeasure, new SelectList(new List<Object>
                                                                                    {
                                                                                    new { value = 1 , text = "MINUTE"  },
                                                                                    new { value = 2 , text = "HOUR" },
                                                                                    new { value = 3 , text = "DAY"},
                                                                                    new { value = 4 , text = "MONTH"}
                                                                                    },
                                       "value",
                                       "text",
                                       @Model.CriticalGasHistoricalDataOlderThanUnitMeasure), new { id = "deleteGasOlderThanUnitMeasureDropDownList" })
                            </h2>
                        </div>
                    </th>
                </tr>
            </table>
        </div>

        <div class="w3-container divgray">
            <table>
                <tr>
                    <th>
                        <h1 class="w3-large">@Html.DisplayNameFor(model => model.InternalTime)</h1>
                    </th>

                    <th>
                        <dd5>
                            <h2 class="w3-large">@Html.TextBoxFor(model => model.InternalTime, new { style = "width:210px", @readonly = "readonly" })</h2>
                        </dd5>
                    </th>
                </tr>
            </table>
        </div>

        <div class="w3-container divgray">
            <table>
                <tr>
                    <th>
                        <h1 class="w3-large">@Html.DisplayNameFor(model => model.AlertsToEmail)</h1>
                    </th>

                    <th>
                        <dd6>
                            <h2 class="w3-large">@Html.TextBoxFor(model => model.AlertsToEmail, new { id = "alertsToEmail", style = "width:270px" })</h2>
                        </dd6>
                    </th>
                </tr>
            </table>
        </div>

        <button type="button" class="button button3" id="saveSettingsButton" onclick="saveSettings()">Save settings</button>

        <!-- Popup for success -->
        <div id="popup" class="modal">

            <!-- Modal content -->
            <div class="modal-content">
                <div class="modal-header">
                    <span class="close">&times;</span>
                    <h2>Success!</h2>
                </div>
                <div class="modal-body">
                    <p>Settings were successfully saved!</p>
                </div>
                <div class="modal-footer">
                    <h3></h3>
                </div>
            </div>

        </div>

        <!-- Popup for validation -->
        <div id="popupValidation" class="modal">

            <!-- Modal content -->
            <div class="modal-content">
                <div class="modal-header">
                    <span class="close">&times;</span>
                    <h2>Error!</h2>
                </div>
                <div id="validationBody" class="modal-body">
                </div>
                <div class="modal-footer">
                    <h3></h3>
                </div>
            </div>

        </div>
    </dl>
</div>
<p>

</p>


<script src="http://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
@*<script type="text/javascript" charset="utf8" src="/js/jquery.dataTables.js"></script>*@

<script type="text/javascript">

    var span = document.getElementsByClassName("close")[0];
    var modal = document.getElementById('popup');
    var modalValidation = document.getElementById('popupValidation');

    function saveSettings() {

        var validationMessage = '<p>';
        var validationError = false;

        if ($('#temperatureAlertYNCheckBox').is(':checked') && $('#temperatureAlertMaxValueTextBox').val() == '' && $('#temperatureAlertMinValueTextBox').val() == '') {
            validationMessage += '<p>Critical temperature is mandatory</p>';
            validationError = true;
        }

        if ($('#temperatureAlertYNCheckBox').is(':checked') && $('#sendTemperatureEmailAlertIntervalTextBox').val() == '') {
            validationMessage += '<p>Temperature email alert interval is mandatory</p>';
            validationError = true;
        }

        if ($('#humidityAlertYNCheckBox').is(':checked') && $('#humidityAlertMaxValueTextBox').val() == '' && $('#humidityAlertMinValueTextBox').val() == '') {
            validationMessage += '<p>Critical humidity is mandatory</p>';
            validationError = true;
        }

        if ($('#humidityAlertYNCheckBox').is(':checked') && $('#sendHumidityEmailAlertIntervalTextBox').val() == '') {
            validationMessage += '<p>Humidity email alert interval is mandatory</p>';
            validationError = true;
        }

        if ($('#motionDetectionAlertYNCheckBox').is(':checked') && $('#sendMotionDetectionEmailAlertIntervalTextBox').val() == '') {
            validationMessage += '<p>Motion detection email alert interval is mandatory</p>';
            validationError = true;
        } 

        validationMessage += '</p>';

        if (validationError) {
            $("#validationBody").empty();
            $("#validationBody").append(validationMessage);
            modalValidation.style.display = "block";
            return;
        }
        else {
            modal.style.display = "block";
        }

        if ($('#temperatureAlertMinValueTextBox').val() == '')
            $('#temperatureAlertMinValueTextBox').val(-123456);

        if ($('#temperatureAlertMaxValueTextBox').val() == '')
            $('#temperatureAlertMaxValueTextBox').val(123456);

        if ($('#humidityAlertMinValueTextBox').val() == '')
            $('#humidityAlertMinValueTextBox').val(-123456);

        if ($('#humidityAlertMaxValueTextBox').val() == '')
            $('#humidityAlertMaxValueTextBox').val(123456);


        var settings = {

            "CriticalTemperatureAlertYN": $('#temperatureAlertYNCheckBox').is(':checked'),
            "CriticalTemperatureAlertMinValue": $('#temperatureAlertMinValueTextBox').val(),
            "CriticalTemperatureAlertMaxValue": $('#temperatureAlertMaxValueTextBox').val(),
            "SendTemperatureEmailAlertInterval": $('#sendTemperatureEmailAlertIntervalTextBox').val(),
            "SendTemperatureEmailAlertIntervalUnitMeasure": $('#sendTemperatureEmailAlertIntervalUnitMeasureDropDownList').val(),
            "CriticalHumidityAlertYN": $('#humidityAlertYNCheckBox').is(':checked'),
            "CriticalHumidityAlertMinValue": $('#humidityAlertMinValueTextBox').val(),
            "CriticalHumidityAlertMaxValue": $('#humidityAlertMaxValueTextBox').val(),
            "SendHumidityEmailAlertInterval": $('#sendHumidityEmailAlertIntervalTextBox').val(),
            "SendHumidityEmailAlertIntervalUnitMeasure": $('#sendHumidityEmailAlertIntervalUnitMeasureDropDownList').val(),
            "DeleteTemperatureHumidityHistoricalDataOlderThan": $('#deleteTemperatureHumidityOlderThanTextBox').val(),
            "DeleteTemperatureHumidityHistoricalDataOlderThanUnitMeasure": $('#deleteTemperatureHumidityOlderThanUnitMeasureDropDownList').val(),
            "MotionDetectionAlertYN": $('#motionDetectionAlertYNCheckBox').is(':checked'), 
            "SendMotionDetectionEmailAlertInterval": $('#sendMotionDetectionEmailAlertIntervalTextBox').val(),
            "SendMotionDetectionEmailAlertIntervalUnitMeasure": $('#sendMotionDetectionEmailAlertIntervalUnitMeasureDropDownList').val(),
            "SoundDetectionAlertYN": $('#soundDetectionAlertYNCheckBox').is(':checked'),
            "CriticalGasAlertYN": $('#gasDetectionAlertYNCheckBox').is(':checked'),
            "AlertsToEmail": $('#alertsToEmail').val(),
            "DeleteMotionDetectionHistoricalDataOlderThan": $('#deleteMotionDetectionOlderThanTextBox').val(),
            "DeleteMotionDetectionHistoricalDataOlderThanUnitMeasure": $('#deleteMotionDetectionOlderThanUnitMeasureDropDownList').val(),
            "DeleteSoundDetectionHistoricalDataOlderThan": $('#deleteSoundDetectionOlderThanTextBox').val(),
            "DeleteSoundDetectionHistoricalDataOlderThanUnitMeasure": $('#deleteSoundDetectionOlderThanUnitMeasureDropDownList').val(),
            "CriticalGasHistoricalDataOlderThan": $('#deleteGasOlderThanTextBox').val(),
            "CriticalGasHistoricalDataOlderThanUnitMeasure": $('#deleteGasOlderThanUnitMeasureDropDownList').val()
        };

        if ($('#temperatureAlertMinValueTextBox').val() == -123456)
            $('#temperatureAlertMinValueTextBox').val('');

        if ($('#temperatureAlertMaxValueTextBox').val() == 123456)
            $('#temperatureAlertMaxValueTextBox').val('');

        if ($('#humidityAlertMinValueTextBox').val() == -123456)
            $('#humidityAlertMinValueTextBox').val('');

        if ($('#humidityAlertMaxValueTextBox').val() == 123456)
            $('#humidityAlertMaxValueTextBox').val('');

        $.ajax({
            type: "POST",
            url: '@Url.Action("SaveSettings", "Home")',
            data: settings,
            dataType: "json",
            success: function (response) {

            },
            error: function (jqXHR, textStatus, errorThrown) {
                alert(textStatus + " " + errorThrown);
            }
        });
    }

    // When the user clicks on <span> (x), close the modal
    span.onclick = function () {
        modal.style.display = "none";
    }

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function (event) {
        if (event.target == modalValidation) {
            modalValidation.style.display = "none";
        }

        if (event.target == modal) {
            modal.style.display = "none";
            modalValidation.style.display = "none";
        }
    }

    $(window).bind("load", function () {

        if ($('#temperatureAlertMinValueTextBox').val() == -123456)
            $('#temperatureAlertMinValueTextBox').val('');

        if ($('#temperatureAlertMaxValueTextBox').val() == 123456)
            $('#temperatureAlertMaxValueTextBox').val('');

        if ($('#humidityAlertMinValueTextBox').val() == -123456)
            $('#humidityAlertMinValueTextBox').val('');

        if ($('#humidityAlertMaxValueTextBox').val() == 123456)
            $('#humidityAlertMaxValueTextBox').val('');

        if ($('#motionDetectionAlertYNCheckBox').is(':checked')) {
            $('#sendMotionDetectionEmailAlertIntervalTextBox').removeAttr("disabled");
            $('#sendMotionDetectionEmailAlertIntervalUnitMeasureDropDownList').removeAttr("disabled");
        }
        else {
            $('#sendMotionDetectionEmailAlertIntervalTextBox').attr("disabled", "disabled");
            $('#sendMotionDetectionEmailAlertIntervalUnitMeasureDropDownList').val('');
            $('#sendMotionDetectionEmailAlertIntervalUnitMeasureDropDownList').attr("disabled", "disabled");
        }

        if ($('#temperatureAlertYNCheckBox').is(':checked')) {
            $('#temperatureAlertMaxValueTextBox').removeAttr("disabled");
            $('#temperatureAlertMinValueTextBox').removeAttr("disabled");
            $('#sendTemperatureEmailAlertIntervalTextBox').removeAttr("disabled");
            $('#sendTemperatureEmailAlertIntervalUnitMeasureDropDownList').removeAttr("disabled");
        }
        else {
            $('#temperatureAlertMaxValueTextBox').attr("disabled", "disabled");
            $('#temperatureAlertMaxValueTextBox').val('');
            $('#temperatureAlertMinValueTextBox').attr("disabled", "disabled");
            $('#temperatureAlertMinValueTextBox').val('');
            $('#sendTemperatureEmailAlertIntervalTextBox').attr("disabled", "disabled");
            $('#sendTemperatureEmailAlertIntervalTextBox').val('');
            $('#sendTemperatureEmailAlertIntervalUnitMeasureDropDownList').attr("disabled", "disabled");
            $('#sendTemperatureEmailAlertIntervalUnitMeasureDropDownList').val('');
        }

        if ($('#humidityAlertYNCheckBox').is(':checked')) {
            $('#humidityAlertMaxValueTextBox').removeAttr("disabled");
            $('#humidityAlertMinValueTextBox').removeAttr("disabled");
            $('#sendHumidityEmailAlertIntervalTextBox').removeAttr("disabled");
            $('#sendHumidityEmailAlertIntervalUnitMeasureDropDownList').removeAttr("disabled");
        }
        else {
            $('#humidityAlertMaxValueTextBox').attr("disabled", "disabled");
            $('#humidityAlertMaxValueTextBox').val('');
            $('#humidityAlertMinValueTextBox').attr("disabled", "disabled");
            $('#humidityAlertMinValueTextBox').val('');
            $('#sendHumidityEmailAlertIntervalTextBox').attr("disabled", "disabled");
            $('#sendHumidityEmailAlertIntervalTextBox').val('');
            $('#sendHumidityEmailAlertIntervalUnitMeasureDropDownList').attr("disabled", "disabled");
            $('#sendHumidityEmailAlertIntervalUnitMeasureDropDownList').val('');
        }
    });

    function enableDisableMotionDetectionEmailAlertInterval() {

        if ($('#motionDetectionAlertYNCheckBox').is(':checked')) {
            $('#sendMotionDetectionEmailAlertIntervalTextBox').removeAttr("disabled");
            $('#sendMotionDetectionEmailAlertIntervalUnitMeasureDropDownList').removeAttr("disabled");
        }
        else {
            $('#sendMotionDetectionEmailAlertIntervalTextBox').attr("disabled", "disabled");
            $('#sendMotionDetectionEmailAlertIntervalTextBox').val('');
            $('#sendMotionDetectionEmailAlertIntervalUnitMeasureDropDownList').attr("disabled", "disabled");
        }
    }

    function enableDisableTemperatureEmailAlert() {
        
        if ($('#temperatureAlertYNCheckBox').is(':checked')) { 
            $('#temperatureAlertMaxValueTextBox').removeAttr("disabled");
            $('#temperatureAlertMinValueTextBox').removeAttr("disabled");
            $('#sendTemperatureEmailAlertIntervalTextBox').removeAttr("disabled");
            $('#sendTemperatureEmailAlertIntervalUnitMeasureDropDownList').removeAttr("disabled");
        }
        else {
            $('#temperatureAlertMaxValueTextBox').attr("disabled", "disabled");
            $('#temperatureAlertMaxValueTextBox').val('');
            $('#temperatureAlertMinValueTextBox').attr("disabled", "disabled");
            $('#temperatureAlertMinValueTextBox').val('');
            $('#sendTemperatureEmailAlertIntervalTextBox').attr("disabled", "disabled");
            $('#sendTemperatureEmailAlertIntervalTextBox').val('');
            $('#sendTemperatureEmailAlertIntervalUnitMeasureDropDownList').attr("disabled", "disabled");
            $('#sendTemperatureEmailAlertIntervalUnitMeasureDropDownList').val('');
        }
    }

    function enableDisableHumidityEmailAlert() {

        if ($('#humidityAlertYNCheckBox').is(':checked')) {
            $('#humidityAlertMaxValueTextBox').removeAttr("disabled");
            $('#humidityAlertMinValueTextBox').removeAttr("disabled");
            $('#sendHumidityEmailAlertIntervalTextBox').removeAttr("disabled");
            $('#sendHumidityEmailAlertIntervalUnitMeasureDropDownList').removeAttr("disabled");
        }
        else {
            $('#humidityAlertMaxValueTextBox').attr("disabled", "disabled");
            $('#humidityAlertMaxValueTextBox').val('');
            $('#humidityAlertMinValueTextBox').attr("disabled", "disabled");
            $('#humidityAlertMinValueTextBox').val('');
            $('#sendHumidityEmailAlertIntervalTextBox').attr("disabled", "disabled");
            $('#sendHumidityEmailAlertIntervalTextBox').val('');
            $('#sendHumidityEmailAlertIntervalUnitMeasureDropDownList').attr("disabled", "disabled");
            $('#sendHumidityEmailAlertIntervalUnitMeasureDropDownList').val('');
        }
    }

</script>
